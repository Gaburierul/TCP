import React, { useEffect, useRef, useState } from 'react';
import { StyleSheet, Text, TextInput, Button, View, FlatList, KeyboardAvoidingView, Platform } from 'react-native';
import { io, Socket } from 'socket.io-client';

const SERVER_URL = "https://ideal-tribble-7vv6qp4594vrhx7r-3000.app.github.dev/";

type Mensagem = { texto: string; hora: string; id: string };

export default function App() {
  const socketRef = useRef<Socket | null>(null);
  const [mensagem, setMensagem] = useState('');
  const [chat, setChat] = useState<Mensagem[]>([]);
  const [meuId, setMeuId] = useState<string>('');

  useEffect(() => {
    socketRef.current = io(SERVER_URL, { transports: ['websocket'] });

    socketRef.current.on('connect', () => {
      console.log('Conectado ao servidor, id =', socketRef.current?.id);
      setMeuId(socketRef.current?.id || '');
    });

    socketRef.current.on('mensagem', (msg: Mensagem) => {
      if (msg && msg.texto) setChat(prev => [...prev, msg]);
    });

    socketRef.current.on('connect_error', (err) => {
      console.warn('Erro de conexÃ£o socket:', err);
    });

    return () => {
      socketRef.current?.disconnect();
    };
  }, []);

  const enviarMensagem = () => {
    if (mensagem.trim() && socketRef.current) {
      const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      const novaMsg: Mensagem = { texto: mensagem, hora: timestamp, id: socketRef.current.id || '' };

      setChat(prev => [...prev, novaMsg]); // exibe imediatamente
      socketRef.current.emit('mensagem', novaMsg); // envia para outros
      setMensagem('');
    }
  };

  const renderItem = ({ item }: { item: Mensagem }) => {
    const minhaMensagem = item.id === meuId;
    return (
      <View
        style={[
          styles.msgContainer,
          minhaMensagem ? styles.minhaMsgContainer : styles.outraMsgContainer
        ]}
      >
        <Text style={styles.msg}>{item.texto}</Text>
        <Text style={styles.hora}>{item.hora}</Text>
      </View>
    );
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.select({ ios: 'padding', android: undefined })}
    >
      <Text style={styles.title}>Chat Moderno</Text>

      <FlatList
        style={styles.list}
        data={chat}
        keyExtractor={(_, index) => index.toString()}
        renderItem={renderItem}
      />

      <View style={styles.form}>
        <TextInput
          style={styles.input}
          placeholder="Digite sua mensagem"
          value={mensagem}
          onChangeText={setMensagem}
        />
        <Button title="Enviar" onPress={enviarMensagem} />
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    padding: 20, 
    paddingTop: 50, 
    backgroundColor: '#e0f7fa' // plano de fundo moderno
  },
  title: { 
    fontSize: 24, 
    fontWeight: 'bold', 
    marginBottom: 20, 
    textAlign: 'center',
    color: '#00796b'
  },
  list: { flex: 1, marginBottom: 10 },
  msgContainer: { 
    marginBottom: 6, 
    padding: 10, 
    borderRadius: 12, 
    maxWidth: '75%'
  },
  minhaMsgContainer: {
    backgroundColor: '#4db6ac', // verde para minhas mensagens
    alignSelf: 'flex-end'
  },
  outraMsgContainer: {
    backgroundColor: '#b2dfdb', // azul claro para mensagens dos outros
    alignSelf: 'flex-start'
  },
  msg: { fontSize: 16, color: '#fff' },
  hora: { fontSize: 10, color: '#eee', textAlign: 'right', marginTop: 4 },
  form: { flexDirection: 'row', alignItems: 'center' },
  input: { 
    flex: 1, 
    borderWidth: 1, 
    borderColor: '#ccc', 
    borderRadius: 20, 
    paddingHorizontal: 15, 
    paddingVertical: 8, 
    marginRight: 8, 
    backgroundColor: '#fff'
  },
});
